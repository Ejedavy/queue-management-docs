<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting Started on My New Hugo Site</title>
    <link>http://localhost:1313/getting-started/</link>
    <description>Recent content in Getting Started on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 May 2024 12:00:49 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/getting-started/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installation</title>
      <link>http://localhost:1313/getting-started/installation/</link>
      <pubDate>Wed, 08 May 2024 11:24:54 +0300</pubDate>
      <guid>http://localhost:1313/getting-started/installation/</guid>
      <description>The following steps are here to help you initialize your backend server locally. If you don&amp;rsquo;t know programming at all, we strongly suggest you learn more about it by following this great documentation for beginners.&#xA;Prerequisites Before you begin, ensure you have the following installed:&#xA;Git Docker Python (version 3.8 or higher) Cloning the Repository Start by cloning the repository to your local machine:&#xA;git clone https://github.com/eaaniwezi/QEase.git cd QEase Setting Up PostgreSQL with Docker Run a PostgreSQL server using Docker: docker run --name postgresql -e POSTGRES_USER=yourusername -e POSTGRES_PASSWORD=yourpassword -p 5432:5432 -d postgres Replace yourusername and yourpassword with your desired username and password.</description>
    </item>
    <item>
      <title>Quickstart</title>
      <link>http://localhost:1313/getting-started/quickstart/</link>
      <pubDate>Wed, 08 May 2024 12:00:49 +0300</pubDate>
      <guid>http://localhost:1313/getting-started/quickstart/</guid>
      <description>QEase API Quick Reference Guide&#xA;Base URL Base URL https://qease-app-04a682a52c08.herokuapp.com/docs&#xA;Authentication Endpoint Method Description /login POST Logs in a user /logout POST Logs out a user /register POST Registers a new user /registerAdmin POST Creates a new admin user /refresh POST Refreshes an authentication token Users Endpoint Method Description /users/me GET Retrieves the current user&amp;rsquo;s profile /users/{user_id} GET Fetches details of a user by ID /users/{user_id} PUT Updates a user&amp;rsquo;s details /users/{user_id} DELETE Deletes a user by ID /users GET Retrieves a list of users Services Endpoint Method Description /services/ GET Lists all services /services/ POST Creates a new service /services/{id} GET Retrieves a service by ID /services/{id} PUT Updates a service by ID /services/{id} DELETE Deletes a service by ID Windows Endpoint Method Description /windows/ GET Lists all windows /windows/ POST Creates a new window /windows/{id} GET Retrieves a window by ID /windows/{id} PUT Updates a window by ID /windows/{id} DELETE Deletes a window by ID Clerks Endpoint Method Description /clerks/ GET Retrieves all clerks /clerks/ POST Posts clerks information /clerks/{window_id} DELETE Deletes a clerk entry by window ID Operations Endpoint Method Description /operations/getService/{window_id} GET Fetches service by window ID /operations/getWindow/{service_id} GET Retrieves window by service ID /operations/joinQueue/{service_id} POST User joins a queue by service ID /operations/callClientByWindow POST Calls client by window /operations/processClientByWindow POST Processes client by window /operations/acceptClientByWindow POST Accepts client by window /operations/rejectClientByWindow POST Rejects client by window Security Most endpoints require authentication using HTTP Bearer tokens.</description>
    </item>
  </channel>
</rss>
