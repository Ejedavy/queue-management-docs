[
{
	"uri": "http://localhost:1313/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Getting Started Setup your own bank management server in less than 5 minutes.\n"
},
{
	"uri": "http://localhost:1313/api-services/",
	"title": "API Services",
	"tags": [],
	"description": "",
	"content": "Chapter 2 API Services Here, you will learn about the different services offered through the Queue Management System API.\n"
},
{
	"uri": "http://localhost:1313/getting-started/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "The following steps are here to help you initialize your backend server locally. If you don\u0026rsquo;t know programming at all, we strongly suggest you learn more about it by following this great documentation for beginners.\nPrerequisites Before you begin, ensure you have the following installed:\nGit Docker Python (version 3.8 or higher) Cloning the Repository Start by cloning the repository to your local machine:\ngit clone https://github.com/eaaniwezi/QEase.git cd QEase Setting Up PostgreSQL with Docker Run a PostgreSQL server using Docker: docker run --name postgresql -e POSTGRES_USER=yourusername -e POSTGRES_PASSWORD=yourpassword -p 5432:5432 -d postgres Replace yourusername and yourpassword with your desired username and password. This command starts a PostgreSQL server that listens on the default port 5432.\nVirtual Environment Setup It\u0026rsquo;s recommended to use a virtual environment to isolate project dependencies. You can set one up using:\npython -m venv venv source venv/bin/activate # On Windows use `venv\\Scripts\\activate` Install Dependencies Install the required Python dependencies with pip: pip install -r requirements.txt Database Migrations Set up your initial database schema using Alembic: alembic upgrade head Ensure you have the correct database connection string in your Alembic configuration or environment variables.\nRunning the Application Run the application using Uvicorn: uvicorn app.main:app --reload This command will start the FastAPI application with live reloading enabled.\nAccess the Application Visit http://127.0.0.1:8000 in your web browser to see the running application. For API documentation, navigate to http://127.0.0.1:8000/docs.\nThis website can be automatically published and hosted with Github Pages. To learn more about it visit Github pages\n"
},
{
	"uri": "http://localhost:1313/about/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": "Chapter 3 About QEase is a robust FastAPI-based application designed to streamline queue management systems. This solution provides an efficient way for organizations to manage queues and services digitally, reducing wait times and enhancing customer experience. The application offers a comprehensive suite of features including user management, service handling, window operations, and real-time queue updates, making it ideal for various sectors such as banking, healthcare, and retail.\n"
},
{
	"uri": "http://localhost:1313/getting-started/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "",
	"content": "QEase API Quick Reference Guide\nBase URL Base URL https://qease-app-04a682a52c08.herokuapp.com/docs\nAuthentication Endpoint Method Description /login POST Logs in a user /logout POST Logs out a user /register POST Registers a new user /registerAdmin POST Creates a new admin user /refresh POST Refreshes an authentication token Users Endpoint Method Description /users/me GET Retrieves the current user\u0026rsquo;s profile /users/{user_id} GET Fetches details of a user by ID /users/{user_id} PUT Updates a user\u0026rsquo;s details /users/{user_id} DELETE Deletes a user by ID /users GET Retrieves a list of users Services Endpoint Method Description /services/ GET Lists all services /services/ POST Creates a new service /services/{id} GET Retrieves a service by ID /services/{id} PUT Updates a service by ID /services/{id} DELETE Deletes a service by ID Windows Endpoint Method Description /windows/ GET Lists all windows /windows/ POST Creates a new window /windows/{id} GET Retrieves a window by ID /windows/{id} PUT Updates a window by ID /windows/{id} DELETE Deletes a window by ID Clerks Endpoint Method Description /clerks/ GET Retrieves all clerks /clerks/ POST Posts clerks information /clerks/{window_id} DELETE Deletes a clerk entry by window ID Operations Endpoint Method Description /operations/getService/{window_id} GET Fetches service by window ID /operations/getWindow/{service_id} GET Retrieves window by service ID /operations/joinQueue/{service_id} POST User joins a queue by service ID /operations/callClientByWindow POST Calls client by window /operations/processClientByWindow POST Processes client by window /operations/acceptClientByWindow POST Accepts client by window /operations/rejectClientByWindow POST Rejects client by window Security Most endpoints require authentication using HTTP Bearer tokens. Ensure to include an appropriate authorization header where necessary.\nFor more detailed descriptions, parameters, request bodies, and responses, please refer to the full API documentation at QEase API Docs.\nThis website can be automatically published and hosted with Github Pages. To learn more about it visit Github pages\n"
},
{
	"uri": "http://localhost:1313/contribute/",
	"title": "Contribute",
	"tags": [],
	"description": "",
	"content": "Chapter 4 Contribute We welcome contributions to the QEase project! Whether you\u0026rsquo;re interested in fixing bugs, adding new features, or improving documentation, your help is greatly appreciated. This document provides guidelines for contributing to the QEase project. Please read them carefully to make your contribution process smooth and effective.\n"
},
{
	"uri": "http://localhost:1313/maintenance/",
	"title": "Maintenance",
	"tags": [],
	"description": "",
	"content": "Chapter 5 Maintenance This maintenance guide is intended for maintainers and administrators of the QEase application. It covers routine procedures and guidelines for ensuring the application remains robust, secure, and efficient.\n"
},
{
	"uri": "http://localhost:1313/api-services/authentication/",
	"title": "Authentication",
	"tags": [],
	"description": "",
	"content": "Overview The Authentication Service in the QEase API provides mechanisms for managing user authentication. This includes user registration, login, token refresh, and logout functionalities. These endpoints are crucial for securing access to the application and ensuring that user credentials are handled safely.\nEndpoints Register URL: /register\nMethod: POST\nAuthorization: None\nDescription: Register a new user with a username and password.\nRequest Body:\n{ \u0026#34;username\u0026#34;: \u0026#34;newuser\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password123\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34; } Successful Response:\nCode: 201 Content: {} Error Response: Code: 422 Content: { \u0026#34;detail\u0026#34;: [{ \u0026#34;loc\u0026#34;: [\u0026#34;body\u0026#34;, \u0026#34;username\u0026#34;], \u0026#34;msg\u0026#34;: \u0026#34;field required\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;value_error.missing\u0026#34; }] } Login URL: /login Method: POST Authorization: None Description: Authenticate a user by username and password. Parameters: username (string, required): User\u0026rsquo;s username. password (string, required): User\u0026rsquo;s password. Successful Response: Code: 200 Content: { \u0026quot;access_token\u0026quot;: \u0026quot;jwt-token\u0026quot;, \u0026quot;token_type\u0026quot;: \u0026quot;bearer\u0026quot; } Error Response: Code: 422 Content: { \u0026#34;detail\u0026#34;: [{ \u0026#34;loc\u0026#34;: [\u0026#34;body\u0026#34;, \u0026#34;username\u0026#34;], \u0026#34;msg\u0026#34;: \u0026#34;field required\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;value_error.missing\u0026#34; }] } Refresh Token URL: /refresh Method: POST Authorization: Bearer Token (refresh token) Description: Refresh the access token using a refresh token. Parameters: refresh_token (string, required): Refresh token provided during login or previous refresh. Successful Response: Code: 200 Content: { \u0026quot;access_token\u0026quot;: \u0026quot;new-jwt-token\u0026quot;, \u0026quot;token_type\u0026quot;: \u0026quot;bearer\u0026quot; } Error Response: Code: 422 Content:{ \u0026quot;detail\u0026quot;: \u0026quot;Invalid token\u0026quot; } Logout URL: /logout Method: POST Authorization: Bearer Token Description: Log out a user by invalidating their authentication token. Successful Response: Code: 200 Content: {} Error Response: Code: 422 Content: { \u0026quot;detail\u0026quot;: \u0026quot;Invalid token\u0026quot; } This website can be automatically published and hosted with Github Pages. To learn more about it visit Github pages\n"
},
{
	"uri": "http://localhost:1313/api-services/users/",
	"title": "Users",
	"tags": [],
	"description": "",
	"content": "Overview The User Service in the QEase API provides functionalities for managing user information. It allows fetching, updating, and deleting user data, as well as listing all users registered in the system. These endpoints are critical for managing access and roles within the application.\nEndpoints Current User URL: /users/me\nMethod: GET\nAuthorization: Bearer Token (required)\nDescription: Retrieve details of the currently authenticated user.\nSuccessful Response:\nCode: 200 Content: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;currentuser\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2021-01-01T12:00:00Z\u0026#34; } Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Authentication credentials were not provided or are invalid.\u0026#34; } Get User by ID URL: /users/{user_id}\nMethod: GET\nAuthorization: Bearer Token (required)\nDescription: Fetch details of a user by their unique ID.\nParameters:\nuser_id (path, required, integer): The ID of the user to retrieve. Successful Response:\nCode: 200 Content: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;sampleuser\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2021-02-01T12:00:00Z\u0026#34; } Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;User not found or access denied.\u0026#34; } Edit User URL: /users/{user_id}\nMethod: PUT\nAuthorization: Bearer Token (required)\nDescription: Update details of a specific user by ID.\nParameters:\nuser_id (path, required, integer): The ID of the user to update. Request Body:\nContent: { \u0026#34;username\u0026#34;: \u0026#34;newusername\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34; } Successful Response:\nCode: 200 Content: { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;newusername\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2021-02-01T12:00:00Z\u0026#34; } Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Invalid data provided or operation not permitted.\u0026#34; } Delete User URL: /user/{id}\nMethod: DELETE\nAuthorization: Bearer Token (required)\nDescription: Delete a user by their unique ID.\nParameters:\nid (path, required, integer): The ID of the user to delete. Successful Response:\nCode: 204 Content: None Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;User not found or operation not permitted.\u0026#34; } List All Users URL: /users\nMethod: GET\nAuthorization: Bearer Token (required)\nDescription: Retrieve a list of all users. Optional query parameter to filter users by username.\nParameters:\nusername (query, optional, string): Filter users by username. Successful Response:\nCode: 200 Content: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;userone\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2021-01-01T12:00:00Z\u0026#34; }, { \u0026#34;id\u0026#34;: 2, \u0026#34;username\u0026#34;: \u0026#34;usertwo\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2021-02-01T12:00:00Z\u0026#34; } ] Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Error retrieving users or no users found.\u0026#34; } Security Considerations All user-related endpoints require an authenticated user with appropriate permissions, typically enforced through HTTP Bearer authentication. Ensure secure handling of user data, especially personal information and passwords. Usage These endpoints are intended for use by administrators and authorized personnel tasked with user management within the application. For updating and deleting users, ensure that the operation is permitted for the authenticated user\u0026rsquo;s role. This website can be automatically published and hosted with Github Pages. To learn more about it visit Github pages\n"
},
{
	"uri": "http://localhost:1313/api-services/services/",
	"title": "Services",
	"tags": [],
	"description": "",
	"content": "Overview The Service Management endpoints in the QEase API allow for managing services within the application. This includes operations to create, retrieve, update, and delete services. These endpoints are crucial for maintaining the lifecycle of services offered by the platform.\nEndpoints List Services URL: /services/\nMethod: GET\nAuthorization: Optional\nDescription: Retrieve a list of all services, with optional search functionality.\nQuery Parameters:\nsearch (string, optional): Search term to filter services. Successful Response:\nCode: 200 Content: [] Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Validation error\u0026#34; } Create Service URL: /services/\nMethod: POST\nAuthorization: Bearer Token (required)\nDescription: Create a new service.\nRequest Body:\nContent: { \u0026#34;service_name\u0026#34;: \u0026#34;New Service\u0026#34;, \u0026#34;service_description\u0026#34;: \u0026#34;Description of the new service\u0026#34;, \u0026#34;published\u0026#34;: true } Successful Response:\nCode: 201 Content: {} Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Validation error\u0026#34; } Get Service URL: /services/{id}\nMethod: GET\nAuthorization: Optional\nDescription: Retrieve details of a specific service by ID.\nParameters:\nid (path, required, integer): The ID of the service to retrieve. Successful Response:\nCode: 200 Content:\n{} Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Validation error\u0026#34; } Update Service URL: /services/{id}\nMethod: PUT\nAuthorization: Bearer Token (required)\nDescription: Update details of a specific service by ID.\nParameters:\nid (path, required, integer): The ID of the service to update. Request Body:\nContent: { \u0026#34;service_name\u0026#34;: \u0026#34;Updated Service Name\u0026#34;, \u0026#34;service_description\u0026#34;: \u0026#34;Updated description\u0026#34;, \u0026#34;published\u0026#34;: true } Successful Response:\nCode: 200 Content: {} Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Validation error\u0026#34; } Delete Service URL: /services/{id}\nMethod: DELETE\nAuthorization: Bearer Token (required)\nDescription: Delete a specific service by ID.\nParameters:\nid (path, required, integer): The ID of the service to delete. Successful Response:\nCode: 204 Content: None Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Validation error\u0026#34; } Security Considerations Sensitive endpoints require authentication using HTTP Bearer tokens. Permissions should be properly managed to prevent unauthorized modifications or deletions of services. Usage These endpoints are intended for use by administrators and authorized personnel responsible for service management within the application. Ensure that all interactions with the service management API are performed over HTTPS to protect data integrity and privacy. This website can be automatically published and hosted with Github Pages. To learn more about it visit Github pages\n"
},
{
	"uri": "http://localhost:1313/api-services/windows/",
	"title": "Windows",
	"tags": [],
	"description": "",
	"content": "Overview The Windows Service in the QEase API provides functionalities for managing windows through which services are offered. These endpoints allow administrators to create, retrieve, update, and delete window records, ensuring effective management of service delivery points.\nEndpoints List Windows URL: /windows/\nMethod: GET\nAuthorization: Bearer Token (required)\nDescription: Retrieves all window entries, with an optional search parameter to filter the results.\nQuery Parameters:\nsearch (string, optional): A search term to filter windows by attributes such as window number. Successful Response:\nCode: 200 Content: [ { \u0026#34;window_id\u0026#34;: 1, \u0026#34;window_number\u0026#34;: \u0026#34;W001\u0026#34;, \u0026#34;published\u0026#34;: true }, { \u0026#34;window_id\u0026#34;: 2, \u0026#34;window_number\u0026#34;: \u0026#34;W002\u0026#34;, \u0026#34;published\u0026#34;: true } ] Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Validation error\u0026#34; } Create Window URL: /windows/\nMethod: POST\nAuthorization: Bearer Token (required)\nDescription: Creates a new window record.\nRequest Body:\nContent: { \u0026#34;window_number\u0026#34;: \u0026#34;W003\u0026#34;, \u0026#34;published\u0026#34;: true } Successful Response:\nCode: 201 Content: { \u0026#34;window_id\u0026#34;: 3, \u0026#34;window_number\u0026#34;: \u0026#34;W003\u0026#34;, \u0026#34;published\u0026#34;: true } Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Validation error\u0026#34; } Get Window URL: /windows/{id}\nMethod: GET\nAuthorization: Bearer Token (required)\nDescription: Retrieves details of a specific window by ID.\nParameters:\nid (path, required, integer): The ID of the window to retrieve. Successful Response:\nCode: 200 Content: { \u0026#34;window_id\u0026#34;: 1, \u0026#34;window_number\u0026#34;: \u0026#34;W001\u0026#34;, \u0026#34;published\u0026#34;: true } Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Window not found or access denied.\u0026#34; } Update Window URL: /windows/{id}\nMethod: PUT\nAuthorization: Bearer Token (required)\nDescription: Updates details of a specific window by ID.\nParameters:\nid (path, required, integer): The ID of the window to update. Request Body:\nContent: { \u0026#34;window_number\u0026#34;: \u0026#34;W001-updated\u0026#34;, \u0026#34;published\u0026#34;: false } Successful Response:\nCode: 200 Content: { \u0026#34;window_id\u0026#34;: 1, \u0026#34;window_number\u0026#34;: \u0026#34;W001-updated\u0026#34;, \u0026#34;published\u0026#34;: false } Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Validation error or operation not permitted.\u0026#34; } Delete Window URL: /windows/{id}\nMethod: DELETE\nAuthorization: Bearer Token (required)\nDescription: Deletes a specific window by ID.\nParameters:\nid (path, required, integer): The ID of the window to delete. Successful Response:\nCode: 204 Content: None Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Window not found or deletion not permitted.\u0026#34; } Security Considerations All endpoints require authenticated access, with actions permitted only for users having appropriate roles. It is recommended to enforce strict access control and to audit all operations related to window management. Usage These endpoints are crucial for administrators tasked with setting up and managing service windows within the application. Care should be taken to ensure that only authorized changes are made to window configurations to prevent disruptions in service delivery. This website can be automatically published and hosted with Github Pages. To learn more about it visit Github pages\n"
},
{
	"uri": "http://localhost:1313/api-services/clerks/",
	"title": "Clerks",
	"tags": [],
	"description": "",
	"content": "Overview The Clerk endpoints within the QEase API manage clerk operations. These endpoints facilitate creating, retrieving, and deleting clerk information, crucial for managing clerks assigned to various service windows within the application.\nEndpoints Get All Clerks URL: /clerks/\nMethod: GET\nAuthorization: Bearer Token (required)\nDescription: Retrieves all clerk entries.\nSuccessful Response:\nCode: 200 Content: [ { \u0026#34;service_id\u0026#34;: 1, \u0026#34;window_id\u0026#34;: 1 }, { \u0026#34;service_id\u0026#34;: 2, \u0026#34;window_id\u0026#34;: 2 } ] Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Validation error\u0026#34; } Create Clerk URL: /clerks/\nMethod: POST\nAuthorization: Bearer Token (required)\nDescription: Adds a new clerk entry.\nRequest Body:\nContent: { \u0026#34;service_id\u0026#34;: 1, \u0026#34;window_id\u0026#34;: 1 } Successful Response:\nCode: 201 Content: {} Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Validation error\u0026#34; } Delete Clerk Entry by Window ID URL: /clerks/{window_id}\nMethod: DELETE\nAuthorization: Bearer Token (required)\nDescription: Deletes a clerk entry based on the specified window ID.\nParameters:\nwindow_id (path, required, integer): The ID of the window associated with the clerk entry to delete. Successful Response:\nCode: 204 Content: None Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Clerk entry not found or deletion not permitted.\u0026#34; } Delete All Clerk Entries URL: /clerks/\nMethod: DELETE\nAuthorization: Bearer Token (required)\nDescription: Removes all clerk entries from the system.\nSuccessful Response:\nCode: 204 Content: None Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Deletion not permitted or failed.\u0026#34; } Security Considerations All endpoints require authentication using HTTP Bearer tokens to ensure that only authorized personnel can manage clerk data. Proper permission checks should be in place to prevent unauthorized deletions or modifications. Usage These endpoints are intended primarily for administrators responsible for managing clerks and their assignments to service windows. Ensure that actions on these endpoints are logged and audited for security and compliance purposes. This website can be automatically published and hosted with Github Pages. To learn more about it visit Github pages\n"
},
{
	"uri": "http://localhost:1313/api-services/operations/",
	"title": "Operations",
	"tags": [],
	"description": "",
	"content": "Overview The Operations Service of the QEase API provides endpoints for managing operational aspects of services and windows, including queue management and client servicing. These endpoints are essential for the dynamic interaction between clients, services, and service windows.\nEndpoints Get Service from Window URL: /operations/getService/{window_id}\nMethod: GET\nAuthorization: Bearer Token (required)\nDescription: Retrieves the service associated with a specific window.\nParameters:\nwindow_id (path, required, integer): The ID of the window whose service is to be retrieved. Successful Response:\nCode: 200 Content: { \u0026#34;service_id\u0026#34;: 1, \u0026#34;service_name\u0026#34;: \u0026#34;Customer Support\u0026#34;, \u0026#34;service_description\u0026#34;: \u0026#34;Handling customer support queries\u0026#34; } Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Window not found or access denied.\u0026#34; } Get Window from Service URL: /operations/getWindow/{service_id}\nMethod: GET\nAuthorization: Bearer Token (required)\nDescription: Retrieves the window serving a specific service.\nParameters:\nservice_id (path, required, integer): The ID of the service whose window is to be retrieved. Successful Response:\nCode: 200 Content: { \u0026#34;window_id\u0026#34;: 1, \u0026#34;window_number\u0026#34;: \u0026#34;W001\u0026#34; } Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Service not found or access denied.\u0026#34; } Join Queue URL: /operations/joinQueue/{service_id}\nMethod: POST\nAuthorization: Bearer Token (required)\nDescription: Allows a client to join a queue for a specific service.\nParameters:\nservice_id (path, required, integer): The ID of the service to join. Successful Response:\nCode: 200 Content: { \u0026#34;message\u0026#34;: \u0026#34;Added to queue successfully.\u0026#34; } Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Failed to add to queue.\u0026#34; } Get Queue Pendings URL: /operations/getQueuePendings\nMethod: GET\nAuthorization: Bearer Token (required)\nDescription: Retrieves a list of all pending entries in the queue across all services.\nSuccessful Response:\nCode: 200 Content: [ { \u0026#34;ticket_id\u0026#34;: 101, \u0026#34;service_id\u0026#34;: 1, \u0026#34;status\u0026#34;: \u0026#34;waiting\u0026#34; }, { \u0026#34;ticket_id\u0026#34;: 102, \u0026#34;service_id\u0026#34;: 1, \u0026#34;status\u0026#34;: \u0026#34;waiting\u0026#34; } ] Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Error retrieving queue.\u0026#34; } Process Client by Window URL: /operations/processClientByWindow\nMethod: POST\nAuthorization: Bearer Token (required)\nDescription: Processes the next client in the queue for a specified window.\nQuery Parameters:\nticket_id (integer, required): The ticket ID of the client to be processed. window_id (integer, required): The ID of the window where the client is being serviced. Successful Response:\nCode: 200 Content: { \u0026#34;message\u0026#34;: \u0026#34;Client processed successfully.\u0026#34; } Error Response:\nCode: 422 Content: { \u0026#34;detail\u0026#34;: \u0026#34;Failed to process client.\u0026#34; } Security Considerations All endpoints require authenticated access, utilizing Bearer tokens to ensure that operations are securely managed. Ensure roles and permissions are properly set to allow only authorized users to execute operations, particularly for sensitive actions like processing clients or managing queues. Usage These endpoints are intended for administrators and operators managing the daily operations of service windows. Proper monitoring and logging of these actions are recommended to maintain an audit trail for security and operational accountability. This website can be automatically published and hosted with Github Pages. To learn more about it visit Github pages\n"
},
{
	"uri": "http://localhost:1313/maintenance/main/",
	"title": "Maintenance",
	"tags": [],
	"description": "",
	"content": "Regular Maintenance Tasks Database Backups Perform regular database backups to prevent data loss. Use automated tools or scripts to schedule backups. Store backups in a secure and reliable location. Dependency Updates Regularly update project dependencies to their latest stable versions to ensure security and performance. Test updates in a development environment before applying them to production. Performance Monitoring Monitor the application\u0026rsquo;s performance to identify potential bottlenecks or issues. Utilize logging and monitoring tools to keep track of system health. Security Audits Conduct periodic security audits to identify and mitigate vulnerabilities. Update the security practices and documentation based on audit findings. Handling Issues Regularly review and triage new issues reported by users. Prioritize critical bugs and security issues for immediate attention. Documentation Updates Keep the project documentation up-to-date with new features, changes, and setup instructions. Ensure that the contribution guidelines are clear and current. Community Engagement Engage with the community to gather feedback on software usage and potential improvements. Address community questions and provide support when necessary. Deployment Follow best practices for deploying updates to the production environment. Ensure minimal downtime and inform users of major changes in advance. Questions and Support For additional support or to report specific maintenance issues, please contact the project maintainers at d.edje@innopolis.university.\nThis website can be automatically published and hosted with Github Pages. To learn more about it visit Github pages\n"
},
{
	"uri": "http://localhost:1313/contribute/main/",
	"title": "Contribute",
	"tags": [],
	"description": "",
	"content": "Getting Started Fork the Repository\nStart by forking the QEase repository to your GitHub account. Clone Your Fork\nClone your fork to your local machine: git clone https://github.com/yourusername/QEase.git cd QEase Set Up Your Development Environment\nSet up the project environment as described in the project\u0026rsquo;s README. Create a Branch\nCreate a new branch for your feature or fix: git checkout -b your-branch-name Making Changes Make your changes locally. Write or adapt tests as necessary. Add or change the documentation as needed. Make sure your code adheres to the existing style to maintain the project\u0026rsquo;s consistency. Submitting a Pull Request Commit Your Changes\nCommit your changes with a clear commit message: git commit -m \u0026#34;Add a concise and descriptive message describing the changes\u0026#34; Push to GitHub\nPush your changes to your fork: git push origin your-branch-name Open a Pull Request\nGo to the repository on GitHub and open a pull request with a clear title and description. Code Review\nOnce your pull request is opened, maintainers will review your work. Be open to making changes based on feedback. Merge\nAfter your pull request is approved, a maintainer will merge it into the main branch. Code of Conduct Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.\nQuestions? If you have any questions or need further clarification about contributing, please open an issue in the GitHub repository.\nThis website can be automatically published and hosted with Github Pages. To learn more about it visit Github pages\n"
},
{
	"uri": "http://localhost:1313/about/main/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": "Purpose The primary goal of QEase is to transform traditional queue management into a seamless and interactive digital experience. By leveraging advanced technologies, QEase enables organizations to optimize their service delivery, enhance operational efficiency, and improve client satisfaction. The platform facilitates a smoother flow of people through services, reduces overcrowding, and allows users to monitor and manage queues effectively.\nTechnology Stack QEase is built on FastAPI, a modern, fast (high-performance) web framework for building APIs with Python 3.7+ based on standard Python type hints. The key features of QEase include:\nFastAPI Framework: For creating RESTful API endpoints with automatic interactive API documentation. Uvicorn: An ASGI server for running the application, known for its high performance. PostgreSQL: The primary database, managed within Docker containers for development and production environments. Alembic: For database migrations, ensuring that database schema updates are version controlled and deployable. Docker: Used to containerize the application and its dependencies, facilitating consistent environments and easy deployment. About the Developer QEase was developed by Eje David, a student at Innopolis University, as part of the coursework for Technical Communication. The project showcases the integration of technical expertise and communication skills to deliver a software solution that addresses real-world problems.\nFor further inquiries or support, please contact Eje David at d.edje@innopolis.university.\nMore Information For more details on how to use QEase, please visit the official QEase Documentation hosted on Heroku. The documentation provides comprehensive guides on setup, configuration, and usage of the API, ensuring you can get the most out of QEase.\nThis website can be automatically published and hosted with Github Pages. To learn more about it visit Github pages\n"
},
{
	"uri": "http://localhost:1313/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Documentation This documentation helps you to set up your own Bank Queue Management System\nDocumentation Summary Getting Started Chapter 1 Getting Started Setup your own bank management server in less than 5 minutes.\nInstallation The following steps are here to help you initialize your backend server locally. If you don\u0026rsquo;t know programming at all, we strongly suggest you learn more about it by following this great documentation for beginners. Prerequisites Before you begin, ensure you have the following installed: Git Docker Python (version 3.8 or higher) Cloning the Repository Start by cloning the repository to your local machine: git clone https://github.com/eaaniwezi/QEase.git cd QEase Setting Up PostgreSQL with Docker Run a PostgreSQL server using Docker: docker run --name postgresql -e POSTGRES_USER=yourusername -e POSTGRES_PASSWORD=yourpassword -p 5432:5432 -d postgres Replace yourusername and yourpassword with your desired username and password.\nQuickstart QEase API Quick Reference Guide Base URL Base URL https://qease-app-04a682a52c08.herokuapp.com/docs Authentication Endpoint Method Description /login POST Logs in a user /logout POST Logs out a user /register POST Registers a new user /registerAdmin POST Creates a new admin user /refresh POST Refreshes an authentication token Users Endpoint Method Description /users/me GET Retrieves the current user\u0026rsquo;s profile /users/{user_id} GET Fetches details of a user by ID /users/{user_id} PUT Updates a user\u0026rsquo;s details /users/{user_id} DELETE Deletes a user by ID /users GET Retrieves a list of users Services Endpoint Method Description /services/ GET Lists all services /services/ POST Creates a new service /services/{id} GET Retrieves a service by ID /services/{id} PUT Updates a service by ID /services/{id} DELETE Deletes a service by ID Windows Endpoint Method Description /windows/ GET Lists all windows /windows/ POST Creates a new window /windows/{id} GET Retrieves a window by ID /windows/{id} PUT Updates a window by ID /windows/{id} DELETE Deletes a window by ID Clerks Endpoint Method Description /clerks/ GET Retrieves all clerks /clerks/ POST Posts clerks information /clerks/{window_id} DELETE Deletes a clerk entry by window ID Operations Endpoint Method Description /operations/getService/{window_id} GET Fetches service by window ID /operations/getWindow/{service_id} GET Retrieves window by service ID /operations/joinQueue/{service_id} POST User joins a queue by service ID /operations/callClientByWindow POST Calls client by window /operations/processClientByWindow POST Processes client by window /operations/acceptClientByWindow POST Accepts client by window /operations/rejectClientByWindow POST Rejects client by window Security Most endpoints require authentication using HTTP Bearer tokens.\nAPI Services Chapter 2 API Services Here, you will learn about the different services offered through the Queue Management System API.\nAuthentication Overview The Authentication Service in the QEase API provides mechanisms for managing user authentication. This includes user registration, login, token refresh, and logout functionalities. These endpoints are crucial for securing access to the application and ensuring that user credentials are handled safely. Endpoints Register URL: /register Method: POST Authorization: None Description: Register a new user with a username and password. Request Body: { \u0026#34;username\u0026#34;: \u0026#34;newuser\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password123\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34; } Successful Response:\nUsers Overview The User Service in the QEase API provides functionalities for managing user information. It allows fetching, updating, and deleting user data, as well as listing all users registered in the system. These endpoints are critical for managing access and roles within the application. Endpoints Current User URL: /users/me Method: GET Authorization: Bearer Token (required) Description: Retrieve details of the currently authenticated user. Successful Response: Code: 200 Content: { \u0026#34;id\u0026#34;: 1, \u0026#34;username\u0026#34;: \u0026#34;currentuser\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2021-01-01T12:00:00Z\u0026#34; } Error Response:\nServices Overview The Service Management endpoints in the QEase API allow for managing services within the application. This includes operations to create, retrieve, update, and delete services. These endpoints are crucial for maintaining the lifecycle of services offered by the platform. Endpoints List Services URL: /services/ Method: GET Authorization: Optional Description: Retrieve a list of all services, with optional search functionality. Query Parameters: search (string, optional): Search term to filter services. Successful Response:\nWindows Overview The Windows Service in the QEase API provides functionalities for managing windows through which services are offered. These endpoints allow administrators to create, retrieve, update, and delete window records, ensuring effective management of service delivery points. Endpoints List Windows URL: /windows/ Method: GET Authorization: Bearer Token (required) Description: Retrieves all window entries, with an optional search parameter to filter the results. Query Parameters: search (string, optional): A search term to filter windows by attributes such as window number.\nClerks Overview The Clerk endpoints within the QEase API manage clerk operations. These endpoints facilitate creating, retrieving, and deleting clerk information, crucial for managing clerks assigned to various service windows within the application. Endpoints Get All Clerks URL: /clerks/ Method: GET Authorization: Bearer Token (required) Description: Retrieves all clerk entries. Successful Response: Code: 200 Content: [ { \u0026#34;service_id\u0026#34;: 1, \u0026#34;window_id\u0026#34;: 1 }, { \u0026#34;service_id\u0026#34;: 2, \u0026#34;window_id\u0026#34;: 2 } ] Error Response:\nOperations Overview The Operations Service of the QEase API provides endpoints for managing operational aspects of services and windows, including queue management and client servicing. These endpoints are essential for the dynamic interaction between clients, services, and service windows. Endpoints Get Service from Window URL: /operations/getService/{window_id} Method: GET Authorization: Bearer Token (required) Description: Retrieves the service associated with a specific window. Parameters: window_id (path, required, integer): The ID of the window whose service is to be retrieved.\nAbout Chapter 3 About QEase is a robust FastAPI-based application designed to streamline queue management systems. This solution provides an efficient way for organizations to manage queues and services digitally, reducing wait times and enhancing customer experience. The application offers a comprehensive suite of features including user management, service handling, window operations, and real-time queue updates, making it ideal for various sectors such as banking, healthcare, and retail.\nAbout Purpose The primary goal of QEase is to transform traditional queue management into a seamless and interactive digital experience. By leveraging advanced technologies, QEase enables organizations to optimize their service delivery, enhance operational efficiency, and improve client satisfaction. The platform facilitates a smoother flow of people through services, reduces overcrowding, and allows users to monitor and manage queues effectively. Technology Stack QEase is built on FastAPI, a modern, fast (high-performance) web framework for building APIs with Python 3.\nContribute Chapter 4 Contribute We welcome contributions to the QEase project! Whether you\u0026rsquo;re interested in fixing bugs, adding new features, or improving documentation, your help is greatly appreciated. This document provides guidelines for contributing to the QEase project. Please read them carefully to make your contribution process smooth and effective.\nContribute Getting Started Fork the Repository Start by forking the QEase repository to your GitHub account. Clone Your Fork Clone your fork to your local machine: git clone https://github.com/yourusername/QEase.git cd QEase Set Up Your Development Environment Set up the project environment as described in the project\u0026rsquo;s README. Create a Branch Create a new branch for your feature or fix: git checkout -b your-branch-name Making Changes Make your changes locally. Write or adapt tests as necessary.\nMaintenance Chapter 5 Maintenance This maintenance guide is intended for maintainers and administrators of the QEase application. It covers routine procedures and guidelines for ensuring the application remains robust, secure, and efficient.\nMaintenance Regular Maintenance Tasks Database Backups Perform regular database backups to prevent data loss. Use automated tools or scripts to schedule backups. Store backups in a secure and reliable location. Dependency Updates Regularly update project dependencies to their latest stable versions to ensure security and performance. Test updates in a development environment before applying them to production. Performance Monitoring Monitor the application\u0026rsquo;s performance to identify potential bottlenecks or issues. Utilize logging and monitoring tools to keep track of system health.\nContribute to this documentation Feel free to send your feedback to d.edje@innopolis.univesity Your modification will be deployed automatically when merged.\n"
},
{
	"uri": "http://localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]